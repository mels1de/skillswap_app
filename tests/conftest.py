import osimport sysimport pytestfrom fastapi.testclient import TestClientfrom sqlalchemy.ext.asyncio import create_async_engine, AsyncSessionfrom sqlalchemy.orm import sessionmakerROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))sys.path.insert(0, ROOT)import app.db.database as databaseimport app.api.auth as auth_apifrom app.main import appfrom app.db.base import BaseTEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"@pytest.fixture(scope="session")def engine():    return create_async_engine(TEST_DATABASE_URL, echo=False, future=True)@pytest.fixture(autouse=True)async def prepare_db(engine):    async with engine.begin() as conn:        await conn.run_sync(Base.metadata.drop_all)        await conn.run_sync(Base.metadata.create_all)    yield@pytest.fixture(scope="session")def SessionLocal(engine):    return sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)@pytest.fixturedef client(monkeypatch, SessionLocal):    async def _get_test_session():        async with SessionLocal() as session:            yield session    app.dependency_overrides[database.get_async_session] = _get_test_session    app.dependency_overrides[auth_api.get_async_session] = _get_test_session    return TestClient(app)